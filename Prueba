import tkinter as tk
from tkinter import messagebox
from matplotlib.figure import Figure
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2Tk
import matplotlib.patches as patches
from mpl_interactions import ioff, panhandler, zoom_factory
import matplotlib.pyplot as plt
from tkinter import ttk
import numpy as np
from mpl_toolkits.mplot3d.art3d import Poly3DCollection


class MatplotlibGUI:

    def drawCilinder(self):
        pass
    def drawSPhere(self):
        pass
    def drawPlates(self, length, separation, height):
        self.ax.clear()
        plate1 = patches.Rectangle((0, 0), length, height , linewidth=1, edgecolor='r', facecolor='r')
        plate2 = patches.Rectangle((0, height + separation), length, height, linewidth=1, edgecolor='b', facecolor='b')
        self.ax.add_patch(plate1)
        self.ax.add_patch(plate2)
        self.canvas.draw()

    def calcPlateswithoutDielectric(self, length, separation, height, voltage):
        capacitance = (8.85e-12) * (height*length / separation)
        charge = capacitance * voltage
        energy = 0.5*charge*voltage
        self.result1.config(text = "Carga: " + str(charge) + "C\n" + "Capacitancia: " + str(capacitance) + "F\n" + "Energía: " + str(energy) + "J")

        
    
    def calculateData(self, type):

        if (type == "Placas paralelas"):
            length = float(self.length.get())
            height = float(self.height.get())
            separation = float(self.separation.get())
            voltage = float(self.voltage1.get())

            self.drawPlates(length, separation, height)
            self.calcPlateswithoutDielectric(length, separation, height, voltage)
        elif (type == "Esferico"):
            pass
        elif (type == "Cilindrico"):
            pass




        # Redraw the 3D plot
        self.canvas.draw()

    
    def __init__(self, master):
    
        self.master = master
        self.master.title("Interfaz capacitores")

        self.fig = Figure(figsize=(6, 4), dpi=100)
        self.ax = self.fig.add_subplot()
        self.ax.grid(True)
        tk.Label(text="Elije el tipo de capacitor").pack()
        tk.Label(text="Nota: si elijes un capacitor con dieléctrico, el valor de la constante K es de 3.40 (se tomará en cuenta que el dieléctrico es el Plexiglas) ").pack()

        self.canvas = FigureCanvasTkAgg(self.fig, master=self.master)
        self.canvas.get_tk_widget().pack()
        # Habilitar zoom mediante el mouse de la computadora
        zoom_factory(self.ax, base_scale=1.1)
        #Habilitar la barra de herramientas
        toolbar = NavigationToolbar2Tk(self.canvas, self.master, pack_toolbar=False)
        toolbar.update()
        toolbar.pack()
        toolbar.pan() #Habilitar la navegación mediante el mouse
        #Definir los botones para dibujar las distribuciones de carga
        self.notebook = ttk.Notebook(master)
        self.tab1  = ttk.Frame(self.notebook)
        self.tab2 = ttk.Frame(self.notebook)
        self.tab3 =ttk.Frame(self.notebook)
        self.notebook.add(self.tab1, text="Capacitor de placas paralelas")
        self.notebook.add(self.tab2, text="Capacitor esférico")
        self.notebook.add(self.tab3, text="Capacitor cilíndrico")
        self.notebook.pack()


        #Pantalla para el capacitor de placas paralelas
        self.lenght_Label = tk.Label(self.tab1, text="Longitud").pack() 
        self.length = tk.Entry(self.tab1)
        self.length.pack()
        self.height_Label = tk.Label(self.tab1, text="Altura").pack()
        self.height = tk.Entry(self.tab1)
        self.height.pack()
        self.sep_label = tk.Label(self.tab1, text="Separación").pack()
        self.separation = tk.Entry(self.tab1)
        self.separation.pack()
        self.voltage1_label = tk.Label(self.tab1, text="Voltaje").pack()
        self.voltage1 = tk.Entry(self.tab1)
        self.voltage1.pack()
        self.checkbox1 = tk.Checkbutton(self.tab1, text="Dieléctrico a la mitad").pack()
        self.checkbox2 = tk.Checkbutton(self.tab1, text="Dieléctrico completo").pack()
        self.calcButton1 = tk.Button(self.tab1, text="Calcular", command= lambda:self.calculateData("Placas paralelas")).pack()
        #Finaliza la pantalla del capacitor de placas paralelas

        #Pantalla para el capacitor esférico
        self.radio_Label = tk.Label(self.tab2, text="Radio exterior").pack()
        self.entry6 = tk.Entry(self.tab2).pack()
        self.radio_Label = tk.Label(self.tab2, text="Radio interior").pack()
        self.entry7 = tk.Entry(self.tab2).pack()
        self.voltage2 = tk.Label(self.tab2, text="Voltaje").pack()  
        self.entry8 = tk.Entry(self.tab2).pack()   
        self.checkbox3 = tk.Checkbutton(self.tab2, text="Dieléctrico a la mitad").pack()
        self.checkbox4 = tk.Checkbutton(self.tab2, text="Dieléctrico completo").pack()
        self.calcButton2 = tk.Button(self.tab2, text="Calcular", command=lambda: self.calculateData("Esferico")).pack()
        #Finaliza la pantalla del capacitor esférico

        #Etiquetas que almacenan los resultados de los cálculos
        self.result1 = tk.Label(self.tab1, text="")
        self.result1.pack()








if __name__ == "__main__":
    root = tk.Tk()
    app = MatplotlibGUI(root)
    root.mainloop()
